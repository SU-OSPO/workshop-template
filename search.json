[
  {
    "objectID": "01_r_unit/index.html",
    "href": "01_r_unit/index.html",
    "title": "Example R Unit",
    "section": "",
    "text": "While you can make plots with just the packages that come bundled with base R, many R users make their visualizations entirely using the ggplot2 package and an ecosystem of packages designed around it.\n\n# load the ggplot2 package\nlibrary(ggplot2)\n\nAs with the previous session, we’ll be using the Palmer penguins dataset. While we built our own combined dataset in the introduction session, now we’re going to use the built-in raw dataset included in the palmerpenguins package (install this first if you don’t have it yet). First, let’s load the package. By loading the package, it gives us access to the penguins_raw data object that is included (notice that it isn’t shown in our Global Environment, but you can see it in the environment of the palmerpenguins package). Let’s inspect the data using the glimpse() function (we’ll learn more about the dplyr package in the next session).\n\nlibrary(palmerpenguins)\n\n\nAttaching package: 'palmerpenguins'\n\n\nThe following objects are masked from 'package:datasets':\n\n    penguins, penguins_raw\n\ndplyr::glimpse(penguins_raw)\n\nRows: 344\nColumns: 17\n$ studyName             &lt;chr&gt; \"PAL0708\", \"PAL0708\", \"PAL0708\", \"PAL0708\", \"PAL…\n$ `Sample Number`       &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 1…\n$ Species               &lt;chr&gt; \"Adelie Penguin (Pygoscelis adeliae)\", \"Adelie P…\n$ Region                &lt;chr&gt; \"Anvers\", \"Anvers\", \"Anvers\", \"Anvers\", \"Anvers\"…\n$ Island                &lt;chr&gt; \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgerse…\n$ Stage                 &lt;chr&gt; \"Adult, 1 Egg Stage\", \"Adult, 1 Egg Stage\", \"Adu…\n$ `Individual ID`       &lt;chr&gt; \"N1A1\", \"N1A2\", \"N2A1\", \"N2A2\", \"N3A1\", \"N3A2\", …\n$ `Clutch Completion`   &lt;chr&gt; \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"No\", …\n$ `Date Egg`            &lt;date&gt; 2007-11-11, 2007-11-11, 2007-11-16, 2007-11-16,…\n$ `Culmen Length (mm)`  &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34…\n$ `Culmen Depth (mm)`   &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18…\n$ `Flipper Length (mm)` &lt;dbl&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190,…\n$ `Body Mass (g)`       &lt;dbl&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 34…\n$ Sex                   &lt;chr&gt; \"MALE\", \"FEMALE\", \"FEMALE\", NA, \"FEMALE\", \"MALE\"…\n$ `Delta 15 N (o/oo)`   &lt;dbl&gt; NA, 8.94956, 8.36821, NA, 8.76651, 8.66496, 9.18…\n$ `Delta 13 C (o/oo)`   &lt;dbl&gt; NA, -24.69454, -25.33302, NA, -25.32426, -25.298…\n$ Comments              &lt;chr&gt; \"Not enough blood for isotopes.\", NA, NA, \"Adult…\n\n\nAs we discovered before, this dataset includes many different measurements for individual penguins from three different studies. The studies cover both sexes of three different species of penguins from three different islands in the Palmer Archipelago.",
    "crumbs": [
      "Example R Unit"
    ]
  },
  {
    "objectID": "01_r_unit/index.html#other-layers",
    "href": "01_r_unit/index.html#other-layers",
    "title": "Example R Unit",
    "section": "Other layers",
    "text": "Other layers\nThere are many other types of plots that we can make with ggplot2.\n\nHistograms\nWe can visualize the density of values for a single variable with a histogram:\n\nggplot(penguins_raw) +\n  aes(x = `Body Mass (g)`, fill = Species) +\n  geom_histogram() +\n  theme_classic() +\n  theme(axis.text = element_text(color = \"black\"))\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nHistograms don’t require a y-axis aesthetic by default. The counts are tabulated for you. If you specify a “fill” aesthetic, the default is to stack the bars which can sometimes be a bit misleading. You can also dodge them to fix this:\n\nggplot(penguins_raw) +\n  aes(x = `Body Mass (g)`, fill = Species) +\n  geom_histogram(position = \"dodge\") +\n  theme_classic() +\n  theme(axis.text = element_text(color = \"black\"))\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\nBoxplots and Violin Plotss\nWe can visualize the density of values for a single variable across a discrete variable with boxplots or violin plots:\n\nggplot(penguins_raw) +\n  aes(x = Island, y = `Culmen Length (mm)`) +\n  geom_boxplot() +\n  theme_classic() +\n  theme(axis.text = element_text(color = \"black\"))\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n\n\n\n\n\n\n\n\n\n\nggplot(penguins_raw) +\n  aes(x = Island, y = `Culmen Length (mm)`) +\n  geom_violin(scale = \"width\", draw_quantiles = c(0.25, 0.5, 0.75)) +\n  theme_classic() +\n  theme(axis.text = element_text(color = \"black\"))\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_ydensity()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGeom options\n\n\n\nNote that many of these “geom”s have lots of options. For example, here we’ve decided to scale all of the violin plots to the same width and to draw the quartiles on them (mimicking the boxplots above). You can see all of the options for a geom by checking out it’s help page (?geom_violin) or on the ggplot website.\n\n\n\n\n2D Contours\nWe can also visualize the density of values across two continuous variables using a 2D contour. Here we’ll use the isotope data from the penguins dataset. We’ll expand the axes a little bit to better show the contours:\n\nggplot(penguins_raw) +\n  aes(x = `Delta 15 N (o/oo)`, y = `Delta 13 C (o/oo)`) +\n  geom_density_2d(linewidth = 0.25, colour = \"black\") +\n  scale_x_continuous(limits = c(7, 10.5)) +\n  scale_y_continuous(limits = c(-27.5, -23.5)) +\n  theme_classic() +\n  theme(axis.text = element_text(color = \"black\"))\n\nWarning: Removed 14 rows containing non-finite outside the scale range\n(`stat_density2d()`).\n\n\n\n\n\n\n\n\n\n\n\nTime Series\nSince there isn’t really any time series data in the penguins dataset, we’ll take a quick detour and use the built-in economics dataset to explore visualizing a time series. In this case, we are looking at unemployment over time:\n\nggplot(economics, aes(x = date, y = unemploy)) +\n  geom_line() +\n  theme_classic() +\n  theme(axis.text = element_text(color = \"black\"))\n\n\n\n\n\n\n\n\ngeom_path() lets you explore how two variables are related over time. For example, unemployment and personal savings rate:\n\nggplot(economics, aes(x = unemploy / pop, y = psavert)) +\n  geom_path(aes(colour = as.numeric(date))) +\n  theme_classic() +\n  theme(axis.text = element_text(color = \"black\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMultiple columns for individual aesthetics\n\n\n\nNote how we’ve used multiple columns of the data to define the x-axis here. You can use any sort of mathetical operators to combine multiple columns into a single aesthetic, as long as you are doing row-wise math. We’ll learn about summary statistics for groups of rows in the next session.",
    "crumbs": [
      "Example R Unit"
    ]
  },
  {
    "objectID": "01_r_unit/index.html#combining-layers",
    "href": "01_r_unit/index.html#combining-layers",
    "title": "Example R Unit",
    "section": "Combining layers",
    "text": "Combining layers\nWe can also combine multiple layers to show the same data in different ways in the same plot. For example, we could show the raw data for the above contour plot in addition to the contours:\n\nggplot(penguins_raw) +\n  aes(x = `Delta 15 N (o/oo)`, y = `Delta 13 C (o/oo)`) +\n  geom_point() +\n  geom_density_2d_filled(alpha = 0.5) +\n  geom_density_2d(linewidth = 0.25, colour = \"black\") +\n  scale_x_continuous(limits = c(7, 10.5)) +\n  scale_y_continuous(limits = c(-27.5, -23.5)) +\n  coord_cartesian(expand = FALSE) +\n  theme_classic() +\n  theme(axis.text = element_text(color = \"black\"))\n\nWarning: Removed 14 rows containing non-finite outside the scale range\n(`stat_density2d_filled()`).\n\n\nWarning: Removed 14 rows containing non-finite outside the scale range\n(`stat_density2d()`).\n\n\nWarning: Removed 14 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLayer order\n\n\n\nWhen combining layers, the layers are added to the plot in order, so in this case the points are the bottom layer and the contour lines are the top layer. We changed the alpha of the middle layer to prevent the points from being blocked. I’ve also used the coord_cartesian() function to remove the default axis expansion. This way the background color reaches both axes and doesn’t have a white gap.",
    "crumbs": [
      "Example R Unit"
    ]
  },
  {
    "objectID": "01_r_unit/index.html#facetting",
    "href": "01_r_unit/index.html#facetting",
    "title": "Example R Unit",
    "section": "Facetting",
    "text": "Facetting\nLet’s take our scatterplot example from earlier:\n\nggplot(penguins_raw) +\n  aes(x = `Body Mass (g)`, y = `Flipper Length (mm)`,\n      color = Island, shape = Sex) +\n  geom_point() +\n  scale_color_brewer(palette = \"Set1\") +\n  scale_x_continuous(name = \"Body Mass (grams)\") +\n  scale_y_continuous(name = \"Flipper Length (millimeters)\") +\n  theme_classic() +\n  theme(axis.text = element_text(color = \"black\"))\n\nWarning: Removed 11 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nNow, what if we wanted to also split the data by the species of the penguins? We’re already using color and shape, so what other aesthetic could we use? We could possible use some shapes that have both a fill and outline color, but that sounds messy. Instead of using another aesthetic, we could also use a facet. This splits the chart into multiple panels:\n\nggplot(penguins_raw) +\n  aes(x = `Body Mass (g)`, y = `Flipper Length (mm)`,\n      color = Island, shape = Sex) +\n  geom_point() +\n  scale_color_brewer(palette = \"Set1\") +\n  scale_x_continuous(name = \"Body Mass (grams)\") +\n  scale_y_continuous(name = \"Flipper Length (millimeters)\") +\n  facet_wrap(vars(Species), ncol = 1) +\n  theme_classic() +\n  theme(axis.text = element_text(color = \"black\"))\n\nWarning: Removed 11 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nWe can get even crazier by faceting by multiple variables:\n\nggplot(penguins_raw) +\n  aes(x = `Body Mass (g)`, y = `Flipper Length (mm)`,\n      color = Island, shape = Sex) +\n  geom_point() +\n  scale_color_brewer(palette = \"Set1\") +\n  scale_x_continuous(name = \"Body Mass (grams)\") +\n  scale_y_continuous(name = \"Flipper Length (millimeters)\") +\n  facet_grid(rows = vars(Species), cols = vars(studyName)) +\n  theme_classic() +\n  theme(axis.text = element_text(color = \"black\"))\n\nWarning: Removed 11 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nOK, maybe we’ve gone a little too far here, but you get the picture!",
    "crumbs": [
      "Example R Unit"
    ]
  },
  {
    "objectID": "03_multipage_unit/exercise3.html",
    "href": "03_multipage_unit/exercise3.html",
    "title": "Exercise 3: Collaborating in GitHub using the Fork and Pull Model",
    "section": "",
    "text": "In this exercise you will learn how to collaborate with others using GitHub. You will work with a partner to contribute to the test repository they created on GitHub in Exercise 2 (and they will do the same with your repository!).\n\nFind a partner to work with. Get the web address of the test repository they created in Exercise 2. This is the URL of their repository website (not the ssh URL that they used to clone their repository). The URL should be something like https://github.com/THEIR_USERNAME/THEIR_REPO_NAME where THEIR_USERNAME is your partner’s GitHub username and THEIR_REPO_NAME is the name of the repository they created in Exercise 2. Again, you are going to the website for your partner’s repository, not your own.\nClick the Fork button in the upper right of their website. This will open the “Create a new fork” page.\nOn the “Create a new fork” page:\n\nUnder “Owner” select your username.\nLeave the repository name the same. The Owner / respository name should look like YOUR_USERNAME / THEIR_REPO_NAME.\n\nNow click the green Create fork button in the lower right. This will create a “fork” of your partner’s repository under your own GitHub account. You will be redirected to your fork. Note the URL at the top of the webpage: it should be something like https://github.com/YOUR_USERNAME/THEIR_REPO_NAME.\n\n\n\n\n\n\n\nAbout forks\n\n\n\nA fork is a copy of another user’s GitHub repository. When you create the fork, you create copy of the repository under your GitHub account. The copy of the repository has the entire commit history of the repository up until that point. It is, for all intents and purposes, an exact replica of the original repository, except that the copy is now under your account.\nFrom this point on, your fork is independent of the original. Since it is under your account, you are free to make any changes that you like to — add commits or branches, delete things, etc. — without affecting the original repository. Changes to the original repository also won’t affect your fork unless you actively sync it by using git fetch (more on that below).\nYou can create a fork of any public repository on GitHub!\nThe advantage of using forks is it allows you to develop things without breaking the original repository while you do. This is incredibly useful if you want to contribute to another project that is widely used: you create a fork of that project under your own GitHub account; clone your fork to your local computer; develop your fork by pushing/pulling between your local computer and GitHub. Then, when you are content that your new addition is ready, you fill out a pull request to merge the changes in your fork into the original repository (usually on its main branch). The original repo’s owner(s) can then review your changes, and, if they accept them, merge it into their repository for widespread adoption. This is known as the fork and pull model.\nThe diagram below illustrates the relationship between a fork (on GitHub) and a clone: \n\n\n\nYou want to contribute a new development to your partner’s repository. To do so, first clone your fork of their repository to your local computer:\n\nIf you are not already there, go to your fork’s website on GitHub. The web address should be something like https://github.com/YOUR_USERNAME/THEIR_REPO_NAME.\nOn your fork’s website, click the green &lt;&gt; Code button, then copy the SSH URL. It should be something like git@github.com:YOUR_USERNAME/THEIR_REPO_NAME.git\nGo to your terminal, cd to the directory you want to store your fork, and type:\n\ngit clone SSH_URL\nwhere SSH_URL is the SSH URL you copied.\ncd into the repository you just cloned and type\n\ngit remote -v\nto see the origin URL. Note that the origin for this repository is your fork on GitHub, not your partner’s repository.\n\nNow let’s create a branch called dev2 to add a new feature to the mymath.R file. Create the branch on your local computer by typing:\n\ngit checkout -b dev2\nThis will create and switch to a new branch called dev2. You can verify you’re on the new branch by typing git branch.\n\nUse your favorite text editor to open mymath.R and add the following lines to it:\n\n\nmultiply &lt;- function(a, b) {\n    return (a*b)\n    }\nSave the changes.\n\nCommit your changes by running:\n\ngit add -u\ngit commit -m \"add multiplication function to mymath file\"\n\nThis commit (and the dev2 branch) currently only exists on your local copy of your fork. Push the branch to your fork on GitHub by running:\n\ngit push -u origin dev2\nNote that we had to provide the -u origin dev2 arguments to git push. This is because the dev2 branch does not currently exist on our fork in GitHub. Adding the extra arguments tells git to create a dev2 branch on your fork on GitHub and push the new changes there.\n\nLook at your web browser. As soon as you pushed your changes, you should see a box pop up on your fork’s website on GitHub asking if you would like to file a pull request.\nClick the green Compare & pull request button. This will open up the “Comparing changes” page. Note that in the gray box at the top of the web page the “base” repository is your partner’s* original repository and the base branch is their main branch. This means that you will create a Pull Request on your partner’s repository, and that it will be for merging your changes onto their main branch. You want that!\nFill out the description box if you like and/or change the the “Add a title” box. Then click the green Create pull request button at the bottom.\nAfter you click Create pull request, your partner will see a Pull Request pop up on the GitHub website for their repository. Have them click on the the “Pull Requests” tab at the very top of their website, then click on the pull request.\nYour partner can review your pull request on their GitHub website. If they are satisfied with it, have them click the green button at the bottom of the page, then Confirm, to merge the pull request.\n\nCongratulations! You and your partner have now collaborated on a new feature.\n\nOnce your partner merges the changes, their main branch will update with your new commit. The main branch of your fork will now be out of sync with theirs. To sync it, go to to your GitHub website for your fork (the one with URL https://github.com/YOUR_USERNAME/THEIR_REPO_NAME). You should see a gray dialog box at the top that starts with “This branch is 1 commit behind …”. Click the Sync fork button, then the green Update branch button. This will update your fork’s main branch to be the same as your partner’s.\nUpdate your local copy of your fork. Go to your terminal and, in the repository directory, switch back to the main branch:\n\ngit checkout main\nNow update your main branch by typing:\ngit pull\nThis will update your main to be the same the one on GitHub, which is also the same as your partner’s main branch.\n\nNow that your changes have been merged on to your partner’s main branch and you’ve synced your fork both on GitHub and your computer, you’re free to delete your development branch on your computer. To do so run:\n\ngit branch -d dev2",
    "crumbs": [
      "Example Multipage Unit",
      "Exercise 3: Collaborating in GitHub using the Fork and Pull Model"
    ]
  },
  {
    "objectID": "03_multipage_unit/exercise1.html",
    "href": "03_multipage_unit/exercise1.html",
    "title": "Exercise 1: Practice with git on a local repository",
    "section": "",
    "text": "In this exercise you will initialize a git repository on your computer and explore various git commands with it.\n\nPart 1: Initializing and adding files\n\nGo to your home directory by typing:\ncd\nCreate a directory called test-git-repo and cd into it:\nmkdir test-git-repo\ncd test-git-repo\nAt the moment, test-git-repo is just a normal directory, like any others. We want to turn this into a git repository and track changes to files made in this directory. To do that, run:\ngit init\nNote that you have to run this from within the directory you want to turn into a repository.\ntest-git-repo is now tracked by git. Run:\ngit status\nto see what the status of the repo is. You should get:\nOn branch main\n\nNo commits yet\n\nnothing to commit (create/copy files and use \"git add\" to track)\nLet’s add some files for git to track. Use your favorite text editor to create a file called story.txt and add the following to it:\nOnce upon a time, in a land far,\nfar away...\nSave and exit the file, then type ls to verify it’s there. Now run\ngit status\nagain. You should have:\nOn branch main\n\nNo commits yet\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n    story.txt\n\nnothing added to commit but untracked files present (use \"git add\" to track)\ngit knows you have a file in the directory called story.txt, but it isn’t tracked by git yet!\nTell git to start tracking story.txt by using git add. Run the following:\ngit add story.txt\nNow type git status. You’ll see:\nOn branch main\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n    new file:   story.txt\nNotice that it still says there are no commits, but that on the next commit the file story.txt will be added. This means that story.txt is staged for the next commit.\nCommit the change by running:\ngit commit -m \"add story idea\"\nNow run git status. You should get nothing to commit, working tree clean. Congratulations, you’ve made your first commit! To verify, run:\ngit log\nto see the history of your commits. Since this is your first commit, there will only be one entry.\n\n\n\nPart 2: Making changes to files\n\nYou’re not happy with your story opening. You don’t want to write fairy tales, you want to write SciFi! Use your favorite text editor to open story.txt and change the line Once upon a time, in a land far, to A long time ago in a galaxy far, so that your file now reads:\nA long time ago in a galaxy far,\nfar away...\nMuch better. Now type git status; you should see:\nOn branch main\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n    modified:   story.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ngit recognizes that story.txt has changed, but your changes have not been committed yet. You can see how the file differs from the last commit you did by typing:\ngit diff\nLet’s commit your changes so you don’t lose them! We’ll stage the changes by running git add again:\ngit add story.txt\n(Alternatively, you can just run git add -u to stage changes to all tracked files that have changed.) Now we’ll commit the change, however, we’ll do it slightly differently than we did above. Just run:\ngit commit\n(i.e., don’t include the -m argument). This will cause a text editor to open. The text editor that is used depends on your git settings. Since we set git’s global core.editor to nano in the intro, nano will open up for you. Now you can type in a commit message. Type “change opening” then save by hitting &lt;Ctrl&gt;+O. When nano asks where to save to, just hit &lt;Enter&gt; to save to the default. Then hit &lt;Ctrl&gt;+X to exit. This will complete the commit; you will be returned to the command line. To verify that the commit worked, run:\ngit log\nYou’ll now see 2 commits in your history.\n\n\n\n\n\n\n\nNote\n\n\n\nNote that there are two different ways to provide a commit message:\n\nProvide the -m argument along with a short message in quotes when you run git commit on the command line, like we did in Part 1, step 7 above; i.e, run:\ngit commit -m \"YOUR MESSAGE\"\nIn that case, the commit will be completed on the command line; no text editor will be opened.\nDo not provide the -m argument. In that case, a text editor will open with which you can type the commit message. The commit will be created as soon as you save and exit from the editor. Note that if you exit the editor without saving, the commit will not be created. (You will be returned to the command line with the file changes still in the staged state.)\n\nEither way is fine. Typically the second method is used if you want to write a more elaborate commit message that spans multiple lines, which is difficult to do on the command line.\n\n\n\n\nPart 3: Branches\nYou want to start working on titles for your stories, but you want to do it independently of your work on the story itself. To do that, let’s create a branch to specifically work on titles.\n\nRun git branch. You should get back:\n* main\nThis means there is currently only one branch, called main. The * next to main means that you are currently on the main branch. Let’s create a new branch for working on the titles. Run:\ngit checkout -b title-dev\nYou’ll get Switched to a new branch 'title-dev'. To verify, run git branch again. Now you should see:\n  main\n* title-dev\nNotice that story.txt is still here (type ls) and that your git history is the same as before (type git log). This is because when you create a branch, the branch will have all the same history and files as the main branch.\nLet’s create a file to store our title idea. Use your favorite text editor to create a file called title.txt and put in it:\nSTAR FIGHT!\n(You can also use echo and the &gt; operator on the command line to do this.) The title’s not great, but you can’t think of anything better at the moment.\nNow that you’ve created the file, run git status; you should see that title.txt is untracked. Add it to be tracked and commit:\ngit add title.txt\ngit commit -m \"add title idea\"\nNow type git log; you’ll see you have 3 commits in your history.\nSatisfied with your title for now, go back to your main branch to work on your story some more. Switch back to the main branch by running:\ngit checkout main\n(Notice that we don’t include the -b flag this time. This is because main already exists; we only add the -b when we want to create a new branch.) Verify that you’re on main by running git branch; you should get:\n* main\n  title-dev\nNote that the * is now next to main.\nNow type ls. The title.txt file is gone! To see why, type git log. Your last commit is no longer in your history; you just have the first two commits. This is because your last commit (and the file it created, title.txt) only exists on the title-dev branch. To verify that it’s still there, you check the history of the title-dev branch by running:\ngit log title-dev\nIn graph form, your repository currently looks like this:\n\nHere, each dot represents a commit, and the different lines represent a different branch. Following a line illustrates the history as seen by that branch. Since the commits on title-dev live on their own branch, changes you make on main won’t affect title-dev and vice versa (at least not until we merge the branches; more on that below).\n\n\n\n\n\n\n\nTip\n\n\n\nYou can git graphs like the above in your terminal if you add --graph to the git log command; i.e.\ngit log --graph\n\n\n\nLet’s make some more changes to story.txt. Use your favorite text editor to open story.txt and add the following lines:\n\nIt is period of civil war.\nRebel spaceships, striking\nfrom a hidden base, have won\ntheir first victory against\nthe evil Galactic Empire.\nStage the change and commit it:\ngit add -u\ngit commit -m \"add intro paragraph\"\nNow type git log: you should have 3 commits, none of which include the commits to title-dev branch.\nIn a flash of brilliance, you get an idea for the title of your story. Quick! Switch to your title-dev branch by typing:\ngit checkout title-dev\nYou can verify that you’re on the title-dev branch by typing git branch. Now use your favorite text editor to open title.txt and change STAR FIGHT! to:\nStar Wars\nA NEW HOPE\n\nby\nGeorge Lucas\nNice work, George! Now save and exit. Stage the change and commit it:\ngit add -u\ngit commit -m \"update title\"\nType git log to check your history. Note that there are 4 commits here: the first two from main (before you branched off), and the last two on title-dev. In graph form, your repo looks like this:\n\nSatisfied that your title is perfect, you no longer feel the need to keep the title development on a separate branch. It’s ready to be merged on to the main branch. To do that, switch to the main branch:\ngit checkout main\nand merge in the changes on title-dev by typing:\ngit merge title-dev\nThis will open up your text editor (which we set to nano in the intro). Don’t change the commit message, just save and exit to return to your terminal.\nNow type git log. You should see 6 commits: the initial two commits on main, the first commit on title-dev, the add paragraph commit on main, and the update title commit you made on title-dev, followed by an additional “Merge” commit. This final “merge” commit is to indicate that some of the commits in the history came from another branch (and what the name of the branch was).\nIf you type:\nls\nyou’ll see that both story.txt and title.txt are in your directory (on the main branch), and if you look in them, you’ll see the most up-to-date versions of both. In graph form, your main branch now looks like:\n\n\n\n\n\n\n\n\nNote\n\n\n\nThere is another way to merge branches called rebasing. Rebasing changes the history of the development branch to make it look like all the commits came after the last commit on main. This makes for a cleaner history when merging, but can be more challenging to do correctly. See the Appendix (below) for more information.\n\n\n\nNow that you’ve merged your title-dev branch, you can delete it to save space. To do that, run:\ngit branch -d title-dev\n\n\n\n\n\n\n\nNote\n\n\n\nIf you had not merged everything on title-dev into main, you would have gotten an error preventing you from deleting the branch. The fact that you could delete it gives you confidence that everything on the development branch has been merged.\n\n\n\n\nChallenge Questions: Editing the same file on different branches\nIn the above example we only made changes to different files on our two branches: on main we only edited story.txt, while on title-dev we only edited title.txt. However, there is nothing stopping us from editing the same file concurrently on two different branches. The following questions will illustrate how that works.\n\n\n\n\n\n\nQuestion 1: Setup\n\n\n\nCreate a file called list.txt that initially contains the following three lines:\nalpha\nbravo\ncharlie\nNow use the git commands you learned above to do the following:\n\nAdd and commit list.txt to main.\nCreate a branch called dev1.\nOn dev1 change the first line of list.txt to delta then commit the change.\nGo back to main and change the third line to foxtrot, then commit it.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nRun:\ngit add list.txt\ngit commit -m \"add list.txt\"\nRun:\ngit checkout -b dev1\nUse nano (or your favorite text editor) to edit list.txt and change the first line to delta. Then run:\ngit add list.txt\ngit commit -m \"change the first item of list\"\nFirst run:\ngit checkout main\nThen use nano (or your favorite text editor) to edit list.txt and change the third line to foxtrot. To commit, run:\ngit add list.txt\ngit commit -m \"change the last item of list\"\n\n\n\n\nWhen you are done, list.txt should look like the following on main:\nalpha\nbravo\nfoxtrot\nwhile on dev1 it should look like:\ndelta\nbravo\ncharlie\nYou can check the differences by running git diff main dev1.\n\n\n\n\n\n\n\n\nQuestion 2: Editing different lines\n\n\n\nNow suppose you merge dev1 into main. What happens to list.txt?\nA. main takes precedence since it’s the branch being merged into; list.txt will look like:\nalpha\nbravo\nfoxtrot\nB. dev1 takes precedence since it’s the branch being merged; list.txt will look like:\ndelta\nbravo\ncharlie\nC. The changes from both are adopted; list.txt will look like:\ndelta\nbravo\nfoxtrot\nD. An error is raised because the same file was modified.\nIf you’re not sure, try it yourself and see what happens!\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThe answer is C. Since different lines have been modified, git is able to merge the changes together without issue. To do it yourself, run:\ngit checkout main\ngit merge dev1\n\n\n\n\n\n\n\n\n\n\n\nQuestion 3: Editing the same lines\n\n\n\nAfter merging dev1 on to main, suppose you create another branch called dev2. On dev2 you change the second line of list.txt to be echo while on main you change the second line to easy; i.e. on main list.txt looks like:\ndelta\neasy\nfoxtrot\nOn dev2 list.txt looks like:\ndelta\necho\nfoxtrot\nWhat happens if you merge dev2 into main in this case?\nA. main takes precedence since it’s the branch being merged into; list.txt will look like:\ndelta\neasy\nfoxtrot\nB. dev2 takes precedence since it’s the branch being merged; list.txt will look like:\ndelta\necho\nfoxtrot\nC. The changes from both branches are adopted; list.txt will look like:\ndelta\neasy\necho\nfoxtrot\nD. An error is raised because the same line is modified.\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThe answer is D, an error is raised. Since the same line has been modified in the same file, git cannot tell how to reconcile the differences. This is known as a merge conflict. In this case, git will leave it up to the user to reconcile the differences. How to do that is discussed in the next section.\n\n\n\n\n\n\n\nPart 4: Resolving merge conflicts\nAs illustrated in the Challenge Questions, if the same lines in the same file are modified on two different branches, git will not know how to merge the changes. This is called a merge conflict. In this case, git will ask you to reconcile the differences. To illustrate, let’s try merging dev2 into main after making the changes to list.txt discussed in Question 3 above:\n\nIf you have not done so, try to merge dev2 into main after making the changes to the second line of list.txt discussed in Question 3:\ngit checkout main\ngit merge dev2\nYou should get the following:\nAuto-merging list.txt\nCONFLICT (content): Merge conflict in list.txt\nAutomatic merge failed; fix conflicts and then commit the result.\nTo resolve the merge conflict, we must edit list.txt ourselves. Use nano (or your favorite text editor) to open list.txt. You should see the following:\ndelta\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\neasy\n=======\necho\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; dev2\nfoxtrot\ngit has added the conflicting lines from both branches to the file, along with information about the two branches. The line as it appears on main is prefaced with &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD. This indicates that the following line(s) is (are) how it appears on the branch being merged into. The line(s) is (are) followed by a =======.\nAfter the ======= the line(s) as it/they appear(s) on the branch being merged are shown. These are followed by &gt;&gt;&gt;&gt;&gt;&gt;&gt; BRANCH_NAME (here, BRANCH_NAME is dev2).\nWe are free to edit the file anyway we like to resolve the conflict. You should remove the &lt;&lt;&lt;&lt;, ====, and &gt;&gt;&gt;&gt; lines that git has added, along with the edit you want to make to resolve the conflict.\nIn this case, let’s keep the edit as it appears on dev2, and remove the edit on main. Delete the appropriate lines so that the file looks like:\ndelta\necho\nfoxtrot\nThen save and exit the file.\nNow that we are happy with the way list.txt appears, add the file:\ngit add list.txt\nNow commit without the -m:\ngit commit\nThis will open up your text editor. The commit message will already be set to Merge branch 'dev2'. While you are free to modify this, it’s usually best to leave it as-is, as it indicates the merge. Save and exit the file.\nThe merge conflict is resolved! If you type git log you will see the history with all the commits in it, as if you had a merged without any issue.\n\nMerge conflicts happen, but can be fixed fairly easy. If there were multiple areas in a file that caused a conflict, the conflicting areas would all be surrounded by the same &lt;&lt;&lt;&lt;&lt;&lt;&lt;/=======/&gt;&gt;&gt;&gt;&gt;&gt;&gt; lines that we saw above. You’ll want to search through the file for those to make sure you got all the conflicts. If multiple files had conflicts, git will make you resolve all of them before allowing the merge to complete.\n\n\nSummary\nThat’s the basics of how to use git. In the following parts we’ll see how to use this with GitHub and how to collaborate with partners using git and GitHub.\n\n\nAppendix: Rebasing\nBefore merging title-dev into master in step 8 above, we could have first done a rebase. If you rebase a development branch against its parent branch (in this case main) it will incorporate all the commits that were made on the parent after the development branch was originally created. To do so, the development branch’s history is rearranged so that the additional commits from the parent are placed before all commits that were made on the development branch.\nFor example, if we had run git rebase main while on the title-dev branch in Part 3, step 8 above, title-dev’s history would have been rearranged from:\n\nto:\n\nThe advantage to rebasing is that when we merge a rebased development branch back into main no “Merge” commit is created, and the history on main is much simpler. So, in our story example, if we had done the following in step 8:\ngit checkout title-dev\ngit rebase main\ngit checkout main\ngit merge title-dev\nThen main’s history would have looked like:\n\nrather than the more complicated graph above.\nThe disadvantage to rebasing is it can be more challenging to handle merge conflicts. When rebasing, conflicts need to be handled at the point they are created in the development branch, rather once at the end when the merge occurs. If resolving a conflict affects a later commit on the development branch, it can cause a cascading series of conflicts that can be a challenge to untangle. The other challenge with rebasing is it can cause issues when collaborating with others on a development branch. Since rebasing changes the history of the branch, it can make it a challenge for your colleagues to keep their clones in sync with yours. For these reasons, rebasing is best for more advanced users.\nFor more on rebasing, see this article by the Atlassian corporation: Merging vs. rebasing.",
    "crumbs": [
      "Example Multipage Unit",
      "Exercise 1: Practice with `git` on a local repository"
    ]
  },
  {
    "objectID": "03_multipage_unit/index.html",
    "href": "03_multipage_unit/index.html",
    "title": "Example Multipage Unit",
    "section": "",
    "text": "Objectives\n\n\n\n\n\nLearn how to use git with command-line instructions.\nLearn how to do version control with git.\nUnderstand the differences between git and GitHub.\nUse GitHub to collaborate with others on a project.",
    "crumbs": [
      "Example Multipage Unit"
    ]
  },
  {
    "objectID": "03_multipage_unit/index.html#prerequisites",
    "href": "03_multipage_unit/index.html#prerequisites",
    "title": "Example Multipage Unit",
    "section": "Prerequisites",
    "text": "Prerequisites\nThe following should be done before doing the exercises below.\n\nGitHub ssh keys\nIn exercises 2 and 3 you will be using GitHub to “push” and “pull” commits between your local computer and GitHub’s servers. This requires authentication to be setup. For these purposes we suggest using ssh keys. To set that up, follow the instructions here:\n\nSetup ssh key for GitHub\n\n\n\nGit configuration\nBefore doing the exercises in this session, you’ll need to tell git what your name and email are, so that it creates commits with the appropriate author information. To do that, open a terminal and run the following (it doesn’t matter which directory you run these from), but replacing YOUR NAME with your name and YOUR_EMAIL_ADDRESS with your email address:\ngit config --global user.name \"YOUR NAME\"\ngit config --global user.email \"YOUR_EMAIL_ADDRESS\"\nFor entering longer commit messages (you’ll learn what this means in Exercise 1) we’ll need to tell git what text editor to use. By default git will use vim, which can be tricky to understand for new users. For the purposes of this tutorial, we’ll use the more user-friendly nano. To do that, run the following in your terminal:\ngit config --global core.editor nano\n\n\n\n\n\n\nNote\n\n\n\nIf you wish to reset to the default editor after the tutorial is over, run:\ngit config --global --unset-all core.editor",
    "crumbs": [
      "Example Multipage Unit"
    ]
  },
  {
    "objectID": "03_multipage_unit/index.html#exercises",
    "href": "03_multipage_unit/index.html#exercises",
    "title": "Example Multipage Unit",
    "section": "Exercises",
    "text": "Exercises\n\nExercise1: Practice with git on a local repository\nExercise2: git and GitHub\nExercise3: Collaborating in GitHub using the Fork and Pull Model",
    "crumbs": [
      "Example Multipage Unit"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "[INSERT WORKSHOP SHORT TITLE]",
    "section": "",
    "text": "[INSERT WORKSHOP DATE/TIME]\n[INSERT WORKSHOP LOCATION]"
  },
  {
    "objectID": "index.html#arrival",
    "href": "index.html#arrival",
    "title": "[INSERT WORKSHOP SHORT TITLE]",
    "section": "Arrival",
    "text": "Arrival\nThe event starts at XXX on the XXX and will take place at XXX."
  },
  {
    "objectID": "index.html#schedule",
    "href": "index.html#schedule",
    "title": "[INSERT WORKSHOP SHORT TITLE]",
    "section": "Schedule",
    "text": "Schedule\n\n\n\nTime\nEvent\n\n\n\n\nPLACEHOLDER\nPLACEHOLDER\n\n\nPLACEHOLDER\nPLACEHOLDER\n\n\nPLACEHOLDER\nPLACEHOLDER\n\n\nPLACEHOLDER\nPLACEHOLDER\n\n\nPLACEHOLDER\nPLACEHOLDER\n\n\nPLACEHOLDER\nPLACEHOLDER"
  },
  {
    "objectID": "index.html#instructors",
    "href": "index.html#instructors",
    "title": "[INSERT WORKSHOP SHORT TITLE]",
    "section": "Instructors",
    "text": "Instructors"
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "[INSERT WORKSHOP SHORT TITLE]",
    "section": "Installation",
    "text": "Installation"
  },
  {
    "objectID": "03_multipage_unit/exercise2.html",
    "href": "03_multipage_unit/exercise2.html",
    "title": "Exercise 2: Using git pull and push with GitHub",
    "section": "",
    "text": "Exercise 1 illustrated how to create a new git repository on your local computer. In this exercise we’ll create a new repository on GitHub, clone it to our local computer, make changes, then push it back to GitHub. This is the more common way to create git repositories on GitHub.\n\n\n\n\n\n\nssh key setup\n\n\n\nIn order to do this exercise you will need an ssh key uploaded to GitHub. If you have not done that yet, follow the ssh setup instructions before starting this exercise.\n\n\n\nGo to https://github.com and sign in if you are not already. Then go to https://github.com/new to create a new repository.\nIn the Owner section, click the drop down “Choose an owner” and select yourself.\nYou’ll need to put a name in the “Repository name” field. GitHub will offer a suggestion (where it says “Need inspiration? How about …”). Use the suggested name. That should ensure that the repostiory name is unique, which will make doing Exercise 3 easier.\nUnder “Description” put “My test git repository.”\nMake sure “Public” is selected.\nCheck the box for “Add a README file”. This will cause your repo to be initialized with a README.md file in it. It isn’t strictly necessary, but is good to have, as it’s what GitHub will show by default when people go to your repository.\nUnder “Choose a license” select “GNU General Public License v3.0”. This will cause your repository to be initialized with a LICENSE file that has the GNU Public License v3.0 in it (an open source license). Choosing a license isn’t strictly necessary, but it’s good practice.\nNow click the “Create repository” green button. This will create your repository. You will have the repository webpage open.\nWe want to add things to your repository. You can do that through the web interface, but it’s easier to do it on your local computer, esepcially for code development so that you can test things. To do that we’ll need a local copy of your repository. This is what git clone does: it downloads a local copy of your remote repository (which lives on GitHub) that can track the remote repository.\n\nTo clone the repository, click the Green &lt;&gt; Code button in the upper right, then select the “SSH” tab. We’ll want the SSH version so that we can push changes later.\n\nCopy the URL in the SSH tab. Now open a terminal (you may want to open the terminal side-by-side with your web browser; it’ll make doing the rest of this exercise easier). cd to the directory that you want your local copy of the repository to live, then type:\n\ngit clone SSH_URL\nwhere SSH_URL is the URL you copied from GitHub.\n\nWhen git clone finishes, you will have a new directory that has the same name as your repo on your computer. cd into that and type ls. You should see the README.md file and the LICENSE file.\nThis is your local copy of your repository. It’s setup to track your repo on GitHub, which is called the origin repository. You can verify that by typing:\n\ngit remote -v\nThat will show you the URL of the origin. Note that this is printed twice: once for fetching (i.e., the default repo you will pull new updates from) and one for pushing (i.e., the repo to which you will push changes from your local computer).\n\nNow let’s add a file. In your terminal, use your favorite text editor to create a file called mymath.R and put the following in it:\n\n!#/usr/bin/env R\n\n# Some math functions\n\nadd &lt;- function(a, b) {\n    return (a + b)\n    }\nThis is a simple R program that contains a function to add two numbers.\n\nAdd and commit your file to your repo:\n\ngit add mymath.R\ngit commit -m \"add mymath file\"\nCheck your history to see the commit by typing git log.\n\nNow look at your copy of the repository on GitHub in your web browser. Is mymath.R there? No. Try refreshing the page. Is it there? Still no. This is because you have only commited the file to your local copy of the repository. The origin repository on GitHub doesn’t know about these changes. To get the changes on to your origin repository, type:\n\ngit push\nGo back to your web browser and refresh your repository page. You should now see the mymath.R file there. You can click on it to view it if you like. You can also see your commit history on GitHub (click the icon that looks like a clock just below the green &lt;&gt; Code button on the front page of your repository). Notice that the history on GitHub is the same as your history on your local computer. Your repos are in sync!\n\nLet’s create a branch to do some development work. We could do this on our local computer, but let’s do it on GitHub instead. Click the drop down button that says “main” in the upper left corner of the website. Then click “View all branches”. This will bring you to another page that shows you all your branches. Currently we only have one, main. Create a new branch by clicking the green New branch button in the upper right. In the “New branch name” field type dev1 then click Create new branch. This will create the new branch.\nNow let’s make some changes on the dev1 branch on our local computer. To do that, we’ll need to update our local repo to pickup the new branch. Go to your terminal and type:\n\ngit fetch\nYou’ll see a message telling you about the new branch origin/dev1. You still don’t have this branch on your local repo! If you type git branch, you’ll only see * main. The fetch command just informed your local repo about the existence of the dev1 branch on GitHub. You can verify this by typing git branch -r to see the remote branches.\n\nLet’s checkout a local copy of the dev1 branch. Type:\n\ngit checkout -b dev1 origin/dev1\nAdding the extra origin/dev1 instructs git to make your local dev1 track the remote one. This means that when we git push from this branch it will by default push changes to the dev1 branch on GitHub, not the main branch. You can verify which branch you will push to by typing:\ngit branch -vv\n\nLet’s modify mymath.R on dev1. On your local computer, use your favorite text editor to open mymath.R and add the following to it:\n\n\nsubtract &lt;- function(a, b) {\n    return (a - b)\n    }\nCommit your changes to your local repo:\ngit add -u\ngit commit -m \"add subtraction\"\n\nAgain, your changes to your local dev1 are not on GitHub yet. To do that, push the changes by typing:\n\ngit push\nNote that when you did this, it pushed to the dev1 branch on git hub (you’ll see a message like dev1 -&gt; dev1).\n\nNow look at your web browser. As soon as you typed git push a message popped up that said “dev1 had recent pushes” with a green Compare and pull request button popping up. Click that button. This will open a “pull request” page. The pull request page will automatically have a title that is the message from your last commit. You can optionally add a longer description. Then click the Create pull request button.\nThis will open “Pull request”. Pull requests are GitHub’s way of managing new development. This is particularly useful for collaborating with others on a project. You can use the pull request page to discuss changes before they are merged on to the main branch. You can alos have multiple pull requests open at once.\nLet’s merge your pull request. There’s a green Merge pull request button at the bottom of the page. Click it, then “Confirm merge”. This will merge your changes on dev1 on to main. You now have the option to delete dev1. Feel free to click the delete dev1 branch button.\nNow that your main branch on GitHub has the merged changes, your main branch on your local copy is out of sync. To update it, go to your terminal and switch to your main branch:\n\ngit checkout main\nYou can now bring it up to date with your remote repository by running git pull:\ngit pull\nOnce that’s done, you can also delete your local copy of the dev1 branch by typing:\ngit branch -d dev1",
    "crumbs": [
      "Example Multipage Unit",
      "Exercise 2: Using `git pull` and `push` with GitHub"
    ]
  },
  {
    "objectID": "03_multipage_unit/ssh_setup.html",
    "href": "03_multipage_unit/ssh_setup.html",
    "title": "Create and add an ssh key to GitHub",
    "section": "",
    "text": "In order to push commits to GitHub you need to have authentication setup. While there are a couple of ways to do this, we recommend using ssh keys. The steps below will walk you through how to create an ssh key (if you don’t already have one) and add it to your GitHub account.\nBefore doing step 1, check if you already have a key pair generated. Open a shell and run:\nls ~/.ssh/id_ed25519\nIf a file path is returned, skip step 1. Otherwise, if you get “No such file or directory”, do step 1.\n\nGo to this help article on GitHub, select which operating system you are using for your terminal (either Mac or Linux), then scroll down to “Generating a new SSH key” and follow the instructions there. Stop when you get to “Adding your SSH key to the ssh-agent”.\nThe keygen command should have created a public and private key pair in your ~/.ssh directory. This is a hidden directory that contains your ssh keys, configuration settings, and other files related to ssh. Verify that the keys exist by typing:\n\nls ~/.ssh\nYou should see at least two files in there, one called id_ed25519 and one called id_ed25519.pub. (You may also have other id_* files in there, if you had created key pairs previously.)\nThe id_ed25519 file is your private key. Do not share your private key with anyone! It remains on your computer, and only on your computer. The id_ed25519.pub file is your public key. You can share the contents of your public key with other servers you want to log in to.\n\n\n\n\n\n\nNote: you need a GitHub account to do the following steps. If you do not have a GitHub account, sign up for one by going to https://github.com and following the onscreen instructions. Once you have an account you can proceed.\n\n\n\n\nNow let’s upload your public key to GitHub so that you can use your ssh keypairs when interacting with GitHub. Follow the instructions here: Adding a new SSH key to your GitHub account.\nTo test whether you were successful, in your terminal run\n\nssh -T git@github.com\nYou may be prompted with something like:\n&gt; The authenticity of host 'github.com (IP ADDRESS)' can't be established.\n&gt; ED25519 key fingerprint is SHA256:+DiY3wvvV6TuJJhbpZisF/zLDA0zPMSvHdkr4UvCOqU.\n&gt; Are you sure you want to continue connecting (yes/no)?\nIf so, type yes. You should then get\nHi USERNAME! You've successfully authenticated, but GitHub does not provide shell access.\nwhere USERNAME is your username.\nYou’re now ready to use GitHub!\n\nFor more information on what ssh keys are and how they work, see the lecture on ssh from our summer workshop (Day 2, session 1).",
    "crumbs": [
      "Example Multipage Unit",
      "Create and add an ssh key to GitHub"
    ]
  },
  {
    "objectID": "02_python_unit/index.html",
    "href": "02_python_unit/index.html",
    "title": "Example Python Unit",
    "section": "",
    "text": "This Python tutorial will cover the basics of",
    "crumbs": [
      "Example Python Unit"
    ]
  },
  {
    "objectID": "02_python_unit/index.html#types-in-computing",
    "href": "02_python_unit/index.html#types-in-computing",
    "title": "Example Python Unit",
    "section": "Types in computing",
    "text": "Types in computing\nIn computing, we deal with values, different numbers, text, images (which are numbers), boolean (logical). These values need to be represented in the memory of a computer, that is a number of binary switches (“0’s and 1’s”).\n\nIntegers\nA simple example is an integer number that can be expressed in the base2 (in the example, using 4 “bits”): 0001 is 1 in decimal, 0101 is (from left to right \\(0\\cdot2^3 + 1\\cdot2^2 + 0\\cdot2^1 + 1 \\cdot 2^0(=1) = 5\\). Using enough bits, we can represent any integer number (and use, for example, the leftmost bit as a flag to indicate that a minus is in front of it in order to produce a negative number). Technically, the types encountered are usually called int32, int64 (being the most common ones, but others exist too), where the trailing number indicates the number of bits used. In Python, we do not need to take care of it and integers are “precise enough”. A huge advantage of using Python!\nComparing integer numbers is always correct, because each integer has one, and exactly one representation.\n\n\nStrings (aka text)\nHaving defined integers, it’s easy to define text: each letter corresponds to an integer number (hidden to us users). All that is needed is something that marks a stream of bites as “text” and then evaluates that a certain number corresponds to a letter.\n\n\nFloating point numbers\nThis is where things get a bit tricky: while there is exactly one integer between the integers 4 and 6, for example, there are infinitly many floating point numbers between, say 3.1 and 3.2 and the number of digits can easily be large. This leads to a practical problem: we cannot accurately represent floating point numbers! 3.1 maybe is not equal to 3.1!\nFloating point numbers consist of two parts: an “integer-like” part, that is, a numeric value. And another part that defines the exponent of a base that the numerical value is multiplied by.\nImagine that every float is like an integer, “shifted” to the left or right.\nThe types are usually called float32 or float64 (and more). Usually, use float64 if ever needed for any scientific computing (machine learning being a notable exception).\nA number like 10/3 needs infinitely many digits to represent it exactly, but due to the limited precision that can be stored, it will be truncated in the computer. Therefore \\((10 / 3) \\cdot 3\\) equals \\(10\\), but a computer will return a number like 9.99999999 (with many, typically 8 or 16 digits for a float 32 or float64 respectively), but limited.\n(Python sometimes tries to hide this fact with some numbers, but nothing to rely on)\nAnother consequence is limited precision: adding a very small number to a very large one (i.e. if the small one is smaller than the precision that the large one is stored with, the small one will be “ignored”, as it first has to be converted to the same representation as the large one.",
    "crumbs": [
      "Example Python Unit"
    ]
  },
  {
    "objectID": "02_python_unit/index.html#basic-types-and-operations",
    "href": "02_python_unit/index.html#basic-types-and-operations",
    "title": "Example Python Unit",
    "section": "Basic types and operations",
    "text": "Basic types and operations\nPython has several basic types - numerical (float, int, complex) - string - bool\nThere are several operations defined on them, as we have already seen in examples.\n\na = 1  # creates an integer\n\nb = 3.4  # float\n\n# several ways for strings\nc = \"hello\"\nd = 'world'\ncd = \"welcome to this 'world' here\"  # we can now use '' inside (or vice versa)\ne = \"\"\"hello world\"\"\"  # which we can also wrap\ne2 = \"\"\"hello\nworld\ncome here!\"\"\"\n\ng = True\n\nprint(a, b, c, d, cd, e)\nprint(e2)\nprint(g)\n\n1 3.4 hello world welcome to this 'world' here hello world\nhello\nworld\ncome here!\nTrue\n\n\n\n  type(a) \n\nint\n\n\nWith type(...), we can determine the type of an object.",
    "crumbs": [
      "Example Python Unit"
    ]
  },
  {
    "objectID": "02_python_unit/index.html#strong-typing",
    "href": "02_python_unit/index.html#strong-typing",
    "title": "Example Python Unit",
    "section": "strong typing",
    "text": "strong typing\nPython is strongly typed. This means that the type of the variable matters and some interactions between certain types are not directly possible.\n\na = 1\nb = 2\n\n\na + b\n\n3\n\n\nThese are two integers. We are not surprised that this works. What about the following?\n\nmix_str_int = a + \"foo\"\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[5], line 1\n----&gt; 1 mix_str_int = a + \"foo\"\n\nTypeError: unsupported operand type(s) for +: 'int' and 'str'\n\n\n\nMaybe the following works?\n\nmix_str_int2 = a + \"5\"\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[6], line 1\n----&gt; 1 mix_str_int2 = a + \"5\"\n\nTypeError: unsupported operand type(s) for +: 'int' and 'str'\n\n\n\nPython is strict on the types, but we can sometimes convert from one type to another, explicitly:\n\na + int(\"5\")\n\n6\n\n\n…which works because int(\"5\") -&gt; 5.\nThere are though some implicit conversions in Python, let’s look at the following:\n\nf = 1.2\nprint(type(f))\n\n&lt;class 'float'&gt;\n\n\n\nint_plus_float = a + f\nprint(type(int_plus_float))\n\n&lt;class 'float'&gt;\n\n\nThis is one of the few examples, where Python automatically converts the integer type to a float. The above addition actually reads as\n\nint_plus_float = float(a) + f\n\nSimilar with booleans as they are in principle 1 (True) and 0 (False)\n\nTrue + 5\n\n6\n\n\nFor readability, it is usually better to write an explicit conversion.",
    "crumbs": [
      "Example Python Unit"
    ]
  },
  {
    "objectID": "02_python_unit/index.html#container-types",
    "href": "02_python_unit/index.html#container-types",
    "title": "Example Python Unit",
    "section": "Container types",
    "text": "Container types\nPython has several container types as also found in other languages. The most important ones are: - list (~array in other languages) - dict (~hash table in other languages)\nThey can contain other objects which can then be assigned and accessed via the [] operator (we will have a closer look at operators later on)\nA list stores elements by indices, which are integers, while a dict stores elements by a key, which can be “any basic type” (to be precise: by their “hash”, it can be any immutable type).\n\n# creating a list\nlist1 = [1, 2, 3]\nprint(list1)\n\n[1, 2, 3]\n\n\nWe can access these element by indices, starting from 0\n\nlist1[0]\n\n1\n\n\nWe can also assign a value to an place in the list\n\nlist1[1] = 42\nprint(list1)\n\n[1, 42, 3]\n\n\nand it can be extended with elements\n\nlist1.append(-5)\nprint(list1)\n\n[1, 42, 3, -5]\n\n\nChoosing a value that is not contained in the list raises an error. It is verbose, read and understand it.\nBeing able to understand and interpret errors correctly is a key to becoming better in coding.\n\nlist1[14]\n\n\n---------------------------------------------------------------------------\nIndexError                                Traceback (most recent call last)\nCell In[16], line 1\n----&gt; 1 list1[14]\n\nIndexError: list index out of range\n\n\n\nWe can play a similar game with dicts\n\nperson = {'name': \"Rafael Silva Coutinho\", 'age': 37, 5: True, 11: \"hi\"}  # we can use strings but also other elements\nprint(person)\n\n{'name': 'Rafael Silva Coutinho', 'age': 37, 5: True, 11: 'hi'}\n\n\n\nprint(person['name'])\nprint(person[5])\nprint(person[11])\n\nRafael Silva Coutinho\nTrue\nhi\n\n\nWe can also assign a new value to a key.\n\nperson['age'] = '42.00001'\nprint(person)\n\n{'name': 'Rafael Silva Coutinho', 'age': '42.00001', 5: True, 11: 'hi'}\n\n\n… or even extend it by assigning to a key that did not yet exists in the dict\n\nperson['alias'] = \"rsilvaco\"\nprint(person)\n\n{'name': 'Rafael Silva Coutinho', 'age': '42.00001', 5: True, 11: 'hi', 'alias': 'rsilvaco'}\n\n\nAs we see this works. Notice, that the dict has changed, same as the list before.\nAgain, selecting a key that is not contained in the dict raises an error.\n\nperson['nationality']\n\n\n---------------------------------------------------------------------------\nKeyError                                  Traceback (most recent call last)\nCell In[21], line 1\n----&gt; 1 person['nationality']\n\nKeyError: 'nationality'\n\n\n\nAs any object in Python, there are many useful methods on list and dict that help you accomplish things. For example, what if we want to retrieve a value from a dict only if the key is there and otherwise return a default value? We can use get:\n\nhair_color = person.get('hair_color', 'unknown color')  # the second argument gets returned if key is not in dict\nprint(hair_color)\n\nunknown color",
    "crumbs": [
      "Example Python Unit"
    ]
  },
  {
    "objectID": "02_python_unit/index.html#mutability",
    "href": "02_python_unit/index.html#mutability",
    "title": "Example Python Unit",
    "section": "Mutability",
    "text": "Mutability\nPython has a fundamental distinction between mutable and immutable types.\nMutable means, an object can be changed Immutable means, an object can not be changed\nAs an example, 5 can not change; in general the basic types we looked at cannot change. We can change the value that is assigned to a variable, but the object 5 remains the same. The list and dicts we have seen above on the other hand are mutable, they have changed over the course of execution.\nEvery mutable object has an immutable counterpart (but not vice-versa): - list -&gt; tuple - dict -&gt; frozendict - set -&gt; frozenset - etc.\n\n# creating a tuple\ntuple1 = (1, 3, 5)\n# or from a list\ntuple_from_list = tuple(list1)\n\n\nlist2 = [4, 5]\ntuple2 = (3, 4)\nlist3 = list(tuple2)\n\n\nprint(list2)\nprint(tuple2)\nprint(list3)\n\n[4, 5]\n(3, 4)\n[3, 4]\n\n\nWhile we can access the elements as we can for a list, we can neither assign nor append (or in generate mutate the object:\n\nprint(tuple1[1])  # access works!\n\n3\n\n\n\ntuple1[0] = 5\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[27], line 1\n----&gt; 1 tuple1[0] = 5\n\nTypeError: 'tuple' object does not support item assignment\n\n\n\nWe will soon see the effects and needs for this…\nExercise\nCreate a list with 3 elements. Then create a tuple with 5 elements, one of them being the list. Change an element in the list. Did it change in the tuple? Do you understand this?\n\nmy_list = [1, 2, 3]\nmy_tuple = (4, 5, my_list, 7, 8)\n\n\nmy_list[0] = 8   \nprint(my_tuple)\n\n(4, 5, [8, 2, 3], 7, 8)",
    "crumbs": [
      "Example Python Unit"
    ]
  },
  {
    "objectID": "02_python_unit/index.html#dynamic-typing",
    "href": "02_python_unit/index.html#dynamic-typing",
    "title": "Example Python Unit",
    "section": "Dynamic typing",
    "text": "Dynamic typing\nPython is dynamically typed. This means that a variable, which once was an int, such as a, can be assigned a value of another type (this maybe sounds trivial, but this is not possible to do in many other languages).\n\na = 1\nprint(a)\n\n1\n\n\n\na = \"one\"\nprint(a)\n\none\n\n\n\na = list1\nprint(a)\n\n[1, 42, 3, -5]\n\n\n… and so on",
    "crumbs": [
      "Example Python Unit"
    ]
  },
  {
    "objectID": "02_python_unit/index.html#python-variable-assignement",
    "href": "02_python_unit/index.html#python-variable-assignement",
    "title": "Example Python Unit",
    "section": "Python variable assignement",
    "text": "Python variable assignement\nAssigning something to a variable in Python makes a name point to an actual object, so the name is only a reference. For example creating the variable a and assigning it the object 5 looks like this: \n\na = 3\nlist_a = [1, 2]\nprint(a)\nprint(list_a)\n\n3\n[1, 2]\n\n\n\n\n\nreference2\n\n\n\nb = a  # this assigns the reference of a to b\nlist_b = list_a\nprint(a, b)\nprint(list_a, list_b)\n\n3 3\n[1, 2] [1, 2]\n\n\nBoth objects, b and list_b point now to the same objects in memory as a and list_a respectively. Re-assigning a variable let’s it point to a different object \n\na = 'spam'\nlist_a = [1, 5, 2, 'world', 1]\nprint(a, b)\nprint(list_a, list_b)\n\nspam 3\n[1, 5, 2, 'world', 1] [1, 2]\n\n\nLet’s make them point to the same object again:\n\nb = a\nlist_b = list_a \nprint(a, b)\nprint(list_a, list_b)\n\nspam spam\n[1, 5, 2, 'world', 1] [1, 5, 2, 'world', 1]\n\n\n\nlist_a[1] = 'hello'\nprint(list_a, list_b)\n\n[1, 'hello', 2, 'world', 1] [1, 'hello', 2, 'world', 1]\n\n\nNow we understand what happend: the object that both variables are pointing to simply changed. This is impossible with immutable objects (such as 3), since they are immutable.\nMutable objects usually offer the ability to create a copy.\n\nlist_c = list_a.copy()  # now there are two identical lists in the memory\n\n\nlist_a[2] = 'my'\nprint(list_a)\nprint(list_b)\nprint(list_c)\n\n[1, 'hello', 'my', 'world', 1]\n[1, 'hello', 'my', 'world', 1]\n[1, 'hello', 2, 'world', 1]\n\n\nlist_a and list_b, pointing to the same object that was mutated, have changed, while list_c, pointing to a different object, remained the same.\nLet’s have a look at two operators: the “trivial” == and the is: we know == pretty well, it tells whether the left and the right side are the same. More specific, it tells whether both sides have/represent the same value, not whether they are in fact the same object! The operator is tells us, whether two objects are the same object (compare our assignement model above!).\n\nprint(list_a == list_c)  # not the same\nprint(list_a == list_b)  # the same\n\nFalse\nTrue\n\n\n\nlist_c[2] = 'my'  # make it the same as the other lists\nprint(list_a == list_c)\n\nTrue\n\n\nBut, as we learned before, they are not the same objects!\n\nprint(list_a is list_c)  # nope!\nprint(list_a is list_b)  # yes!\n\nFalse\nTrue\n\n\nUsually, we are interested to compare the values, using == (notable exception: checking, if a value is None means to check using the identity equality is.\nExercise 2: Create a list a = [1, 2, 3] and create a new variable b and assign it to a. Compare a and b using == and is. Print the results. Modify a by appending 4 to it and print b. Do you understand why you have this solution?\n\n# Step 1: Create a list\na = [1, 2, 3]\n\n# Step 2: Assign a to b\nb = a\n\n# Step 3: Compare a and b using == and is\nprint(\"a == b:\", a == b)  # Expected output: True\nprint(\"a is b:\", a is b)  # Expected output: True\n\n# Step 4: Modify a by appending 4\na.append(4)\n\n# Step 5: Print b\nprint(\"b:\", b)  # Expected output: [1, 2, 3, 4]\n\na == b: True\na is b: True\nb: [1, 2, 3, 4]\n\n\nExplanation:\na == b and a is b are both True because b is assigned directly from a, meaning they refer to the same list object. After appending 4 to a, b also changes because both a and b point to the same list in memory.",
    "crumbs": [
      "Example Python Unit"
    ]
  }
]